version: 2.1


# # awscli.sh
# #!/bin/bash
# # Download AWS CLI v2 zip file
# curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
# # Unzip the downloaded zip file
# unzip awscliv2.zip
# # Run the installation script to install AWS CLI v2
# sudo ./aws/install

# # circleci.yml
# install_awscli:
#   description: Install AWS CLI v2
#   steps:
#     - run:
#         name: Install AWS CLI v2
#         command: |
#           chmod +x awscli.sh
#           ./awscli.sh

commands:
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y



# This command installs Ansible
# # ansible.sh
# #!/bin/bash
# # Update package index
# sudo apt update
# # Install software properties common package
# sudo apt install software-properties-common -y
# # Add Ansible repository to the system
# sudo add-apt-repository --yes --update ppa:ansible/ansible
# # Install Ansible
# sudo apt install ansible -y

# # circleci.yml
# install_ansible:
#   description: Install Ansible
#   steps:
#     - run:
#         name: Install Ansible
#         command: |
#           chmod +x ansible.sh
#           ./ansible.sh
  install_nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
            # Install Node.js LTS version as our base Node.js version
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs

            # Use n version manager to use Node.js v13.8.0
            sudo npm install --global n
            sudo n 13.8.0

# # common.sh
# #!/bin/bash
# # Delete backend cloudformation stack using workflow ID
# aws cloudformation delete-stack --stack-name udapeople-backend-$1
# # Delete files in S3 using workflow ID
# aws s3 rm s3://udapeople-$1 --recursive
# # Delete frontend cloudformation stack using workflow ID
# aws cloudformation delete-stack --stack-name udapeople-frontend-$1

# # circleci.yml
# destroy-environment:
#   description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#   parameters:
#     Workflow_ID:
#       type: string
#       default: ${CIRCLE_WORKFLOW_ID:0:7}
#   steps:
#     - run:
#         name: Destroy environments
#         when: on_fail
#         command: |
#           chmod +x common.sh
#           ./common.sh $Workflow_ID



  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>


#   revert-migrations:
#     description: Revert the last migration
#     parameters:
#       Workflow_ID:
#         type: string
#         default: ${CIRCLE_WORKFLOW_ID:0:7}
#     steps:
#       - run:
#           name: Revert migrations
#           when: on_fail
#           command: |
#             # Check if the last migration was successful
#             SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
#             # Revert database state if last migration was successful
#             if (( $SUCCESS == 1 ));
#             then
#               cd ~/project/backend
#               npm install
#               npm run migration:revert
#             fi
# Note: This code was not tested, so there may be errors or issues with it.


  revert-migrations:
    description: Revert the last migration
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps

    # The build-frontend and build-backend jobs checkout the source code,
    #  restore dependencies from cache, and run build scripts for the front-end and back-end, respectively.
    #  The resulting build artifacts are then saved to cache for future use.


  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Front-end Unit Test
          command: |
            cd frontend
            npm install
            npm test

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end Unit Test
          command: |
            cd backend
            npm install
            npm test

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Front-end Scan
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
 
 

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end Scan
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical



#             YAML. It contains steps to deploy infrastructure for the "udapeople" project using AWS CloudFormation and Ansible. Here's a breakdown of the steps:

# deploy-infrastructure: This is the name of the job.
# docker: This specifies the Docker image to use for the job.
# steps: This is a list of steps to execute in order.
# checkout: This checks out the code from the Git repository.
# install_awscli: This installs the AWS CLI version 2.
# Ensure back-end infrastructure exists: This command deploys the CloudFormation stack for the back-end infrastructure.
# Ensure front-end infrastructure exists: This command deploys the CloudFormation stack for the front-end infrastructure.
# Add back-end ip to ansible inventory: This command retrieves the public IP address of the back-end instance and adds it to the Ansible inventory file.
# persist_to_workspace: This saves the Ansible inventory file to the CircleCI workspace for later use.
# destroy-environment: This command destroys the CloudFormation stacks and S3 files if the job fails.
# Note: Some parts of the code include parameterized values that are substituted with the actual values during the job execution, such as ${CIRCLE_WORKFLOW_ID:0:7}.

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment

# deploy-and-configure:
#   docker:
#     - image: cimg/base:stable
#   steps:
#     - checkout
#     - install_awscli
#     - install_ansible
#     - add_ssh_keys:
#         fingerprints: ["d5:a4:0d:bd:36:a7:d2:03:2c:10:93:6a:7c:d1:a7:26"]
#     - run:
#         name: Deploy and configure infrastructure
#         command: |
#           aws cloudformation deploy \
#             --template-file .circleci/files/backend.yml \
#             --tags project=udapeople \
#             --stack-name "udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
#             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
#           cd .circleci/ansible
#           ansible-playbook -i inventory.txt configure-server.yml
#     - run:
#         name: Run migrations
#         command: |
#           cd backend
#           npm install
#           npm run migrations > migrations_dump.txt
#           if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
#           then
#             curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
#           fi

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["d5:a4:0d:bd:36:a7:d2:03:2c:10:93:6a:7c:d1:a7:26"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure Server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install_awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)

            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy-environment
      - revert-migrations

# deploy-backend-infrastructure:
#   docker:
#     - image: cimg/base:stable
#   steps:
#     - checkout
#     - install_awscli
#     - run:
#         name: Ensure back-end infrastructure exists
#         command: |
#           aws cloudformation deploy \
#             --template-file .circleci/files/backend.yml \
#             --tags project=udapeople \
#             --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

# deploy-frontend-infrastructure:
#   docker:
#     - image: cimg/base:stable
#   steps:
#     - checkout
#     - install_awscli
#     - run:
#         name: Ensure front-end infrastructure exists
#         command: |
#           aws cloudformation deploy \
#             --template-file .circleci/files/frontend.yml \
#             --tags project=udapeople \
#             --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
#             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

# run-migrations:
#   docker:
#     - image: cimg/node:13.8.0
#   steps:
#     - checkout
#     - attach_workspace:
#         at: ~/
#     - run:
#         name: Run migrations
#         command: |
#           cd backend
#           npm install
#           npm run migrations > migrations_dump.txt
#     - run:
#         name: Send migration status to kvdb.io
#         command: |
#           if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt

  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      - add_ssh_keys:
          fingerprints: ["d5:a4:0d:bd:36:a7:d2:03:2c:10:93:6a:7c:d1:a7:26"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Package Backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*

            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts

            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environment
      - revert-migrations

# deploy-backend:
#   docker:
#     - image: cimg/base:stable
#   steps:
#     - checkout
#     - install_awscli
#     - install_ansible
#     - install_nodejs
#     - add_ssh_keys:
#         fingerprints: ["d5:a4:0d:bd:36:a7:d2:03:2c:10:93:6a:7c:d1:a7:26"]
#     - attach_workspace:
#         at: ~/
#     - restore_cache:
#         keys: [backend-deps]
#     - run:
#         name: Install dependencies
#         command: |
#           cd backend
#           npm install
#     - run:
#         name: Package Backend
#         command: |
#           cd backend
#           npm run build
#           tar -czf artifact.tar.gz dist/* package*
#           cd ..
#           cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
#     - run:
#         name: Deploy backend
#         command: |
#           cd .circleci/ansible
#           cat inventory.txt
#           ansible-playbook -i inventory.txt deploy-backend.yml
#     - persist_to_workspace:
#         root: ~/
#         paths:
#           - backend/node_modules
#           - backend/dist
#     - destroy-environment
#     - revert-migrations


  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)

            export API_URL=http://${BACKEND_PUBLIC_IP}:3030
            if curl -s $API_URL/api/status | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
            if curl -s $FRONTEND_WEBSITE | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations

# smoke-test:
#   docker:
#     - image: cimg/base:stable
#   steps:
#     - checkout
#     - install_awscli
#     - install_nodejs
#     - attach_workspace:
#         at: ~/
#     - run:
#         name: Backend smoke test.
#         command: |
#           BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
#             --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#             --query 'Reservations[*].Instances[*].PublicIpAddress' \
#             --output text)
#           export API_URL=http://${BACKEND_PUBLIC_IP}:3030
#           if curl -s $API_URL/api/status | grep "ok"; then
#             exit 0
#           else
#             exit 1
#           fi
#     - run:
#         name: Frontend smoke test.
#         command: |
#           FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
#           if curl -s $FRONTEND_WEBSITE | grep "Welcome"; then
#             exit 0
#           else
#             exit 1
#           fi
#     - destroy-environment
#     - revert-migrations
# In deploy-backend, we added a persist_to_workspace step to save the node_modules and dist directories to the workspace for use in later jobs. We also removed the environment variables that were set, as they can be set in the deploy-backend.yml Ansible playbook.

# In smoke-test, we removed the step to install AWS CLI, as it is not needed for this job. We also added an attach_workspace step to access the node_modules and dist directories that were persisted to the workspace in the previous job.



  cloudfront-update:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Save Old Workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
            echo "Old Workflow ID: $OLD_WORKFLOW_ID"
            curl https://kvdb.io/9aj4oJpooXa6VYGJHBe163/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name InitialStack
      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Remove old stacks and files
          command: |
            STACKS=($(aws cloudformation list-stacks \
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))

            echo "Stack names: ${STACKS[@]}"

            OldWorkflowID=$(curl --insecure https://kvdb.io/9aj4oJpooXa6VYGJHBe163/old_workflow_id)
            echo "Old Workflow ID: $OldWorkflowID"

            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]